{"ast":null,"code":"import { API_BASE } from \"./constants\";\nimport { setCookie, getCookie, deleteCookie } from './cookie';\n// --- Выход пользователя ---\nexport async function logoutUser(refreshToken) {\n  const res = await fetch(`${API_URL}/auth/logout`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      token: refreshToken\n    })\n  });\n  return checkResponse(res);\n}\n\n// --- Обновление accessToken ---\nexport async function refreshTokenRequest(refreshToken) {\n  const res = await fetch(`${API_URL}/auth/token`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      token: refreshToken\n    })\n  });\n  return checkResponse(res);\n}\n\n// --- Получение данных пользователя ---\n\nexport async function getUser(accessToken) {\n  const res = await fetch(`${API_URL}/auth/user`, {\n    method: \"GET\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: accessToken\n    }\n  });\n  return checkResponse(res);\n}\n\n// --- Обновление данных пользователя ---\nexport async function updateUser(accessToken, user) {\n  const res = await fetch(`${API_URL}/auth/user`, {\n    method: \"PATCH\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: accessToken\n    },\n    body: JSON.stringify(user)\n  });\n  return checkResponse(res);\n}\n// --- Аутентификация ---\nexport async function registerUser(email, password, name) {\n  const res = await fetch(`${API_URL}/auth/register`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password,\n      name\n    })\n  });\n  return checkResponse(res);\n}\nexport async function loginUser(email, password) {\n  const res = await fetch(`${API_URL}/auth/login`, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  return checkResponse(res);\n}\n\n// --- Работа с токенами ---\n\n// accessToken — только в localStorage, refreshToken — только в cookie\nexport function saveTokens(accessToken, refreshToken) {\n  localStorage.setItem(\"accessToken\", accessToken);\n  setCookie(\"refreshToken\", refreshToken, {\n    path: '/',\n    expires: 60 * 60 * 24 * 7\n  }); // 7 дней\n}\nexport function clearTokens() {\n  localStorage.removeItem(\"accessToken\");\n  deleteCookie(\"refreshToken\");\n}\nexport function getAccessToken() {\n  return localStorage.getItem(\"accessToken\");\n}\nexport function getRefreshToken() {\n  return getCookie(\"refreshToken\");\n}\nconst API_URL = API_BASE;\nexport async function checkResponse(response) {\n  const data = await response.json().catch(() => ({}));\n  if (!response.ok) {\n    // Если сервер вернул message — покажем его, иначе просто статус\n    const msg = data && data.message ? data.message : `Ошибка: ${response.status}`;\n    const error = new Error(msg);\n    // @ts-ignore\n    error.response = response;\n    // @ts-ignore\n    error.data = data;\n    throw error;\n  }\n  return data;\n}\nexport async function getIngredients() {\n  try {\n    const res = await fetch(`${API_URL}/ingredients`);\n    return await checkResponse(res).then(data => data.data);\n  } catch (error) {\n    console.error(\"Ошибка в getIngredients:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["API_BASE","setCookie","getCookie","deleteCookie","logoutUser","refreshToken","res","fetch","API_URL","method","headers","body","JSON","stringify","token","checkResponse","refreshTokenRequest","getUser","accessToken","Authorization","updateUser","user","registerUser","email","password","name","loginUser","saveTokens","localStorage","setItem","path","expires","clearTokens","removeItem","getAccessToken","getItem","getRefreshToken","response","data","json","catch","ok","msg","message","status","error","Error","getIngredients","then","console"],"sources":["/Users/olegbagryantsev/development/react-burger 2/src/utils/api.ts"],"sourcesContent":["import { TIngredient } from \"../types/ingredient\";\r\nimport { API_BASE } from \"./constants\";\r\nimport { setCookie, getCookie, deleteCookie } from './cookie';\r\n// --- Выход пользователя ---\r\nexport async function logoutUser(refreshToken: string) {\r\n  const res = await fetch(`${API_URL}/auth/logout`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ token: refreshToken }),\r\n  });\r\n  return checkResponse(res);\r\n}\r\n\r\n// --- Обновление accessToken ---\r\nexport async function refreshTokenRequest(refreshToken: string) {\r\n  const res = await fetch(`${API_URL}/auth/token`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ token: refreshToken }),\r\n  });\r\n  return checkResponse(res);\r\n}\r\n\r\n// --- Получение данных пользователя ---\r\nexport interface IUserResponse {\r\n  success: boolean;\r\n  user: { name: string; email: string };\r\n}\r\nexport async function getUser(accessToken: string): Promise<IUserResponse> {\r\n  const res = await fetch(`${API_URL}/auth/user`, {\r\n    method: \"GET\",\r\n    headers: { \"Content-Type\": \"application/json\", Authorization: accessToken },\r\n  });\r\n  return checkResponse<IUserResponse>(res);\r\n}\r\n\r\n// --- Обновление данных пользователя ---\r\nexport async function updateUser(\r\n  accessToken: string,\r\n  user: { name?: string; email?: string; password?: string }\r\n) {\r\n  const res = await fetch(`${API_URL}/auth/user`, {\r\n    method: \"PATCH\",\r\n    headers: { \"Content-Type\": \"application/json\", Authorization: accessToken },\r\n    body: JSON.stringify(user),\r\n  });\r\n  return checkResponse(res);\r\n}\r\n// --- Аутентификация ---\r\nexport async function registerUser(\r\n  email: string,\r\n  password: string,\r\n  name: string\r\n) {\r\n  const res = await fetch(`${API_URL}/auth/register`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password, name }),\r\n  });\r\n  return checkResponse(res);\r\n}\r\n\r\nexport async function loginUser(email: string, password: string) {\r\n  const res = await fetch(`${API_URL}/auth/login`, {\r\n    method: \"POST\",\r\n    headers: { \"Content-Type\": \"application/json\" },\r\n    body: JSON.stringify({ email, password }),\r\n  });\r\n  return checkResponse(res);\r\n}\r\n\r\n// --- Работа с токенами ---\r\n\r\n// accessToken — только в localStorage, refreshToken — только в cookie\r\nexport function saveTokens(accessToken: string, refreshToken: string) {\r\n  localStorage.setItem(\"accessToken\", accessToken);\r\n  setCookie(\"refreshToken\", refreshToken, { path: '/', expires: 60 * 60 * 24 * 7 }); // 7 дней\r\n}\r\n\r\n\r\nexport function clearTokens() {\r\n  localStorage.removeItem(\"accessToken\");\r\n  deleteCookie(\"refreshToken\");\r\n}\r\n\r\n\r\nexport function getAccessToken() {\r\n  return localStorage.getItem(\"accessToken\");\r\n}\r\n\r\n\r\nexport function getRefreshToken() {\r\n  return getCookie(\"refreshToken\");\r\n}\r\n\r\nconst API_URL = API_BASE;\r\n\r\nexport async function checkResponse<T>(response: Response): Promise<T> {\r\n  const data = await response.json().catch(() => ({}));\r\n  if (!response.ok) {\r\n    // Если сервер вернул message — покажем его, иначе просто статус\r\n    const msg = data && data.message ? data.message : `Ошибка: ${response.status}`;\r\n    const error = new Error(msg);\r\n    // @ts-ignore\r\n    error.response = response;\r\n    // @ts-ignore\r\n    error.data = data;\r\n    throw error;\r\n  }\r\n  return data;\r\n}\r\n\r\nexport async function getIngredients(): Promise<TIngredient[]> {\r\n  try {\r\n    const res = await fetch(`${API_URL}/ingredients`);\r\n    return await checkResponse<{ data: TIngredient[] }>(res).then(\r\n      (data) => data.data\r\n    );\r\n  } catch (error) {\r\n    console.error(\"Ошибка в getIngredients:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}