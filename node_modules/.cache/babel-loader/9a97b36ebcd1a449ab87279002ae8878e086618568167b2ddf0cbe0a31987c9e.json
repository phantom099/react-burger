{"ast":null,"code":"// orderSlice.ts\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { API_BASE } from '../utils/constants';\nexport const createOrder = createAsyncThunk('order/createOrder', async (ingredientIds, {\n  rejectWithValue\n}) => {\n  try {\n    const res = await fetch(`${API_BASE}/orders`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': localStorage.getItem('accessToken') || ''\n      },\n      body: JSON.stringify({\n        ingredients: ingredientIds\n      })\n    });\n    if (!res.ok) {\n      throw new Error(`Order creation failed: ${res.status}`);\n    }\n    const data = await res.json();\n    return data.order.number;\n  } catch (error) {\n    return rejectWithValue(error instanceof Error ? error.message : 'Unknown error');\n  }\n});\nconst initialState = {\n  number: null,\n  loading: false,\n  error: null\n};\nconst orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    clearOrder: state => {\n      state.number = null;\n      state.loading = false;\n      state.error = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createOrder.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(createOrder.fulfilled, (state, action) => {\n      state.number = action.payload;\n      state.loading = false;\n    }).addCase(createOrder.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload || 'Order creation failed';\n    });\n  }\n});\nexport const {\n  clearOrder\n} = orderSlice.actions;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","API_BASE","createOrder","ingredientIds","rejectWithValue","res","fetch","method","headers","localStorage","getItem","body","JSON","stringify","ingredients","ok","Error","status","data","json","order","number","error","message","initialState","loading","orderSlice","name","reducers","clearOrder","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/olegbagryantsev/development/react-burger 2/src/services/orderSlice.ts"],"sourcesContent":["// orderSlice.ts\r\nimport { createSlice, createAsyncThunk, PayloadAction } from '@reduxjs/toolkit';\r\nimport { API_BASE } from '../utils/constants';\r\n\r\nexport const createOrder = createAsyncThunk(\r\n  'order/createOrder',\r\n  async (ingredientIds: string[], { rejectWithValue }) => {\r\n    try {\r\n      const res = await fetch(`${API_BASE}/orders`, {\r\n        method: 'POST',\r\n        headers: { \r\n          'Content-Type': 'application/json',\r\n          'Authorization': localStorage.getItem('accessToken') || '',\r\n        },\r\n        body: JSON.stringify({ ingredients: ingredientIds }),\r\n      });\r\n      \r\n      if (!res.ok) {\r\n        throw new Error(`Order creation failed: ${res.status}`);\r\n      }\r\n      \r\n      const data = await res.json();\r\n      return data.order.number;\r\n    } catch (error) {\r\n      return rejectWithValue(error instanceof Error ? error.message : 'Unknown error');\r\n    }\r\n  }\r\n);\r\n\r\ninterface OrderState {\r\n  number: number | null;\r\n  loading: boolean;\r\n  error: string | null;\r\n}\r\n\r\nconst initialState: OrderState = {\r\n  number: null,\r\n  loading: false,\r\n  error: null,\r\n};\r\n\r\nconst orderSlice = createSlice({\r\n  name: 'order',\r\n  initialState,\r\n  reducers: {\r\n    clearOrder: (state) => {\r\n      state.number = null;\r\n      state.loading = false;\r\n      state.error = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(createOrder.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(createOrder.fulfilled, (state, action: PayloadAction<number>) => {\r\n        state.number = action.payload;\r\n        state.loading = false;\r\n      })\r\n      .addCase(createOrder.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload as string || 'Order creation failed';\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearOrder } = orderSlice.actions;\r\nexport default orderSlice.reducer;"],"mappings":"AAAA;AACA,SAASA,WAAW,EAAEC,gBAAgB,QAAuB,kBAAkB;AAC/E,SAASC,QAAQ,QAAQ,oBAAoB;AAE7C,OAAO,MAAMC,WAAW,GAAGF,gBAAgB,CACzC,mBAAmB,EACnB,OAAOG,aAAuB,EAAE;EAAEC;AAAgB,CAAC,KAAK;EACtD,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGL,QAAQ,SAAS,EAAE;MAC5CM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAEC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI;MAC1D,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,WAAW,EAAEX;MAAc,CAAC;IACrD,CAAC,CAAC;IAEF,IAAI,CAACE,GAAG,CAACU,EAAE,EAAE;MACX,MAAM,IAAIC,KAAK,CAAC,0BAA0BX,GAAG,CAACY,MAAM,EAAE,CAAC;IACzD;IAEA,MAAMC,IAAI,GAAG,MAAMb,GAAG,CAACc,IAAI,CAAC,CAAC;IAC7B,OAAOD,IAAI,CAACE,KAAK,CAACC,MAAM;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOlB,eAAe,CAACkB,KAAK,YAAYN,KAAK,GAAGM,KAAK,CAACC,OAAO,GAAG,eAAe,CAAC;EAClF;AACF,CACF,CAAC;AAQD,MAAMC,YAAwB,GAAG;EAC/BH,MAAM,EAAE,IAAI;EACZI,OAAO,EAAE,KAAK;EACdH,KAAK,EAAE;AACT,CAAC;AAED,MAAMI,UAAU,GAAG3B,WAAW,CAAC;EAC7B4B,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE;IACRC,UAAU,EAAGC,KAAK,IAAK;MACrBA,KAAK,CAACT,MAAM,GAAG,IAAI;MACnBS,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB;EACF,CAAC;EACDS,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC/B,WAAW,CAACgC,OAAO,EAAGJ,KAAK,IAAK;MACvCA,KAAK,CAACL,OAAO,GAAG,IAAI;MACpBK,KAAK,CAACR,KAAK,GAAG,IAAI;IACpB,CAAC,CAAC,CACDW,OAAO,CAAC/B,WAAW,CAACiC,SAAS,EAAE,CAACL,KAAK,EAAEM,MAA6B,KAAK;MACxEN,KAAK,CAACT,MAAM,GAAGe,MAAM,CAACC,OAAO;MAC7BP,KAAK,CAACL,OAAO,GAAG,KAAK;IACvB,CAAC,CAAC,CACDQ,OAAO,CAAC/B,WAAW,CAACoC,QAAQ,EAAE,CAACR,KAAK,EAAEM,MAAM,KAAK;MAChDN,KAAK,CAACL,OAAO,GAAG,KAAK;MACrBK,KAAK,CAACR,KAAK,GAAGc,MAAM,CAACC,OAAO,IAAc,uBAAuB;IACnE,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAER;AAAW,CAAC,GAAGH,UAAU,CAACa,OAAO;AAChD,eAAeb,UAAU,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}