{"ast":null,"code":"import { setUser, clearUser, setLoading, setError } from './userSlice';\nimport { registerUser, loginUser, logoutUser, refreshTokenRequest, saveTokens, clearTokens, getAccessToken, getRefreshToken, getUser, updateUser } from '../utils/api';\n\n// Получение данных пользователя с автоматическим обновлением токена\nexport const fetchUserThunk = () => async dispatch => {\n  dispatch(setLoading(true));\n  try {\n    let accessToken = getAccessToken();\n    if (!accessToken) throw new Error('Нет accessToken');\n    let res = await getUser(accessToken);\n    dispatch(setUser(res.user));\n  } catch (e) {\n    // Если accessToken истёк, пробуем обновить\n    if (e.message && e.message.includes('401')) {\n      try {\n        const refreshToken = getRefreshToken();\n        if (!refreshToken) throw new Error('Нет refreshToken');\n        const refreshRes = await refreshTokenRequest(refreshToken);\n        if (refreshRes.success) {\n          saveTokens(refreshRes.accessToken, refreshRes.refreshToken);\n          const userRes = await getUser(refreshRes.accessToken);\n          dispatch(setUser(userRes.user));\n        } else {\n          // refresh не удался — делаем logout\n          dispatch(logoutUserThunk());\n        }\n      } catch (err) {\n        // refresh не удался — делаем logout\n        dispatch(logoutUserThunk());\n      }\n    } else {\n      dispatch(setError(e.message || 'Ошибка получения пользователя'));\n    }\n  } finally {\n    dispatch(setLoading(false));\n  }\n};\n\n// Обновление данных пользователя\nexport const updateUserThunk = user => async dispatch => {\n  dispatch(setLoading(true));\n  try {\n    let accessToken = getAccessToken();\n    if (!accessToken) throw new Error('Нет accessToken');\n    const res = await updateUser(accessToken, user);\n    if (res.success) {\n      dispatch(setUser(res.user));\n    } else {\n      dispatch(setError('Ошибка обновления профиля'));\n    }\n  } catch (e) {\n    dispatch(setError(e.message || 'Ошибка обновления профиля'));\n  } finally {\n    dispatch(setLoading(false));\n  }\n};\nexport const registerUserThunk = (email, password, name) => async dispatch => {\n  dispatch(setLoading(true));\n  try {\n    const res = await registerUser(email, password, name);\n    if (res.success) {\n      dispatch(setUser(res.user));\n      saveTokens(res.accessToken, res.refreshToken);\n    } else {\n      dispatch(setError(res.message || 'Registration failed'));\n    }\n  } catch (e) {\n    // Если сервер вернул json с message, покажем его\n    let msg = e.message;\n    if (e.response && typeof e.response.json === 'function') {\n      try {\n        const data = await e.response.json();\n        msg = data.message || msg;\n      } catch {}\n    }\n    dispatch(setError(msg || 'Registration error'));\n  } finally {\n    dispatch(setLoading(false));\n  }\n};\nexport const loginUserThunk = (email, password) => async dispatch => {\n  dispatch(setLoading(true));\n  try {\n    const res = await loginUser(email, password);\n    if (res.success) {\n      dispatch(setUser(res.user));\n      saveTokens(res.accessToken, res.refreshToken);\n    } else {\n      dispatch(setError('Login failed'));\n    }\n  } catch (e) {\n    dispatch(setError(e.message || 'Login error'));\n  } finally {\n    dispatch(setLoading(false));\n  }\n};\nexport const logoutUserThunk = () => async dispatch => {\n  dispatch(setLoading(true));\n  try {\n    const refreshToken = getRefreshToken() || '';\n    await logoutUser(refreshToken);\n    dispatch(clearUser());\n    clearTokens();\n  } catch (e) {\n    dispatch(setError(e.message || 'Logout error'));\n  } finally {\n    dispatch(setLoading(false));\n  }\n};\nexport const refreshTokenThunk = () => async dispatch => {\n  dispatch(setLoading(true));\n  try {\n    const refreshToken = localStorage.getItem('refreshToken') || '';\n    const res = await refreshTokenRequest(refreshToken);\n    if (res.success) {\n      saveTokens(res.accessToken, res.refreshToken);\n    } else {\n      dispatch(setError('Token refresh failed'));\n    }\n  } catch (e) {\n    dispatch(setError(e.message || 'Token refresh error'));\n  } finally {\n    dispatch(setLoading(false));\n  }\n};","map":{"version":3,"names":["setUser","clearUser","setLoading","setError","registerUser","loginUser","logoutUser","refreshTokenRequest","saveTokens","clearTokens","getAccessToken","getRefreshToken","getUser","updateUser","fetchUserThunk","dispatch","accessToken","Error","res","user","e","message","includes","refreshToken","refreshRes","success","userRes","logoutUserThunk","err","updateUserThunk","registerUserThunk","email","password","name","msg","response","json","data","loginUserThunk","refreshTokenThunk","localStorage","getItem"],"sources":["/Users/olegbagryantsev/development/react-burger 2/src/services/userThunks.ts"],"sourcesContent":["import { AppDispatch } from './store';\r\n\r\nimport { setUser, clearUser, setLoading, setError } from './userSlice';\r\nimport { registerUser, loginUser, logoutUser, refreshTokenRequest, saveTokens, clearTokens, getAccessToken, getRefreshToken, getUser, updateUser } from '../utils/api';\r\n\r\n// Получение данных пользователя с автоматическим обновлением токена\r\nexport const fetchUserThunk = () => async (dispatch: AppDispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    let accessToken = getAccessToken();\r\n    if (!accessToken) throw new Error('Нет accessToken');\r\n    let res = await getUser(accessToken);\r\n    dispatch(setUser(res.user));\r\n  } catch (e: any) {\r\n    // Если accessToken истёк, пробуем обновить\r\n    if (e.message && e.message.includes('401')) {\r\n      try {\r\n        const refreshToken = getRefreshToken();\r\n        if (!refreshToken) throw new Error('Нет refreshToken');\r\n        const refreshRes = await refreshTokenRequest(refreshToken) as { success: boolean; accessToken: string; refreshToken: string; };\r\n        if (refreshRes.success) {\r\n          saveTokens(refreshRes.accessToken, refreshRes.refreshToken);\r\n          const userRes = await getUser(refreshRes.accessToken);\r\n          dispatch(setUser(userRes.user));\r\n        } else {\r\n          // refresh не удался — делаем logout\r\n          dispatch(logoutUserThunk() as any);\r\n        }\r\n      } catch (err: any) {\r\n        // refresh не удался — делаем logout\r\n        dispatch(logoutUserThunk() as any);\r\n      }\r\n    } else {\r\n      dispatch(setError(e.message || 'Ошибка получения пользователя'));\r\n    }\r\n  } finally {\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\n// Обновление данных пользователя\r\nexport const updateUserThunk = (user: { name?: string; email?: string; password?: string }) => async (dispatch: AppDispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    let accessToken = getAccessToken();\r\n    if (!accessToken) throw new Error('Нет accessToken');\r\n    const res = await updateUser(accessToken, user) as { success: boolean; user: { email: string; name: string } };\r\n    if (res.success) {\r\n      dispatch(setUser(res.user));\r\n    } else {\r\n      dispatch(setError('Ошибка обновления профиля'));\r\n    }\r\n  } catch (e: any) {\r\n    dispatch(setError(e.message || 'Ошибка обновления профиля'));\r\n  } finally {\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\n\r\nexport const registerUserThunk = (email: string, password: string, name: string) => async (dispatch: AppDispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    const res = await registerUser(email, password, name) as any;\r\n    if (res.success) {\r\n      dispatch(setUser(res.user));\r\n      saveTokens(res.accessToken, res.refreshToken);\r\n    } else {\r\n      dispatch(setError(res.message || 'Registration failed'));\r\n    }\r\n  } catch (e: any) {\r\n    // Если сервер вернул json с message, покажем его\r\n    let msg = e.message;\r\n    if (e.response && typeof e.response.json === 'function') {\r\n      try {\r\n        const data = await e.response.json();\r\n        msg = data.message || msg;\r\n      } catch {}\r\n    }\r\n    dispatch(setError(msg || 'Registration error'));\r\n  } finally {\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\n\r\nexport const loginUserThunk = (email: string, password: string) => async (dispatch: AppDispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    const res = await loginUser(email, password) as {\r\n      success: boolean;\r\n      user: { email: string; name: string };\r\n      accessToken: string;\r\n      refreshToken: string;\r\n    };\r\n    if (res.success) {\r\n      dispatch(setUser(res.user));\r\n      saveTokens(res.accessToken, res.refreshToken);\r\n    } else {\r\n      dispatch(setError('Login failed'));\r\n    }\r\n  } catch (e: any) {\r\n    dispatch(setError(e.message || 'Login error'));\r\n  } finally {\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\n\r\n\r\n\r\nexport const logoutUserThunk = () => async (dispatch: AppDispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    const refreshToken = getRefreshToken() || '';\r\n    await logoutUser(refreshToken);\r\n    dispatch(clearUser());\r\n    clearTokens();\r\n  } catch (e: any) {\r\n    dispatch(setError(e.message || 'Logout error'));\r\n  } finally {\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n\r\n\r\nexport const refreshTokenThunk = () => async (dispatch: AppDispatch) => {\r\n  dispatch(setLoading(true));\r\n  try {\r\n    const refreshToken = localStorage.getItem('refreshToken') || '';\r\n    const res = await refreshTokenRequest(refreshToken) as {\r\n      success: boolean;\r\n      accessToken: string;\r\n      refreshToken: string;\r\n    };\r\n    if (res.success) {\r\n      saveTokens(res.accessToken, res.refreshToken);\r\n    } else {\r\n      dispatch(setError('Token refresh failed'));\r\n    }\r\n  } catch (e: any) {\r\n    dispatch(setError(e.message || 'Token refresh error'));\r\n  } finally {\r\n    dispatch(setLoading(false));\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}